From 534dfdb995edc18e528de8ce9fa20b3df88426ae Mon Sep 17 00:00:00 2001
From: Steve Lhomme <slhomme@matroska.org>
Date: Tue, 23 Jan 2018 15:28:09 +0100
Subject: [PATCH] Rework the way we look at the end boundary when looking an
 element in a parent

The test `MaxDataSize >= (PossibleID_Length + PossibleSizeLength + SizeFound)`
is incorrect when there was garbage data skipped inside the PossibleIdNLength
table.

Now we keep track of how many memmove we had to do to know the real position of
the PossibleIdNLength data since we started reading. That allows a proper check
on the end value since that start.
---
 src/EbmlElement.cpp | 12 ++++++++----
 1 file changed, 8 insertions(+), 4 deletions(-)

diff --git a/src/EbmlElement.cpp b/src/EbmlElement.cpp
index 061074b..871247c 100644
--- libebml-1.3.5/src/EbmlElement.cpp	2018-01-23 15:40:57.156285900 +0100
+++ libebml-1.3.5/src/EbmlElement.cpp.bound	2018-01-23 15:41:51.547866500 +0100
@@ -372,11 +372,12 @@ EbmlElement * EbmlElement::FindNextEleme
   int PossibleSizeLength;
   uint64 SizeUnknown;
   int ReadIndex = 0; // trick for the algo, start index at 0
-  uint32 ReadSize = 0;
+  uint32 ReadSize = 0, IdStart = 0;
   uint64 SizeFound;
   int SizeIdx;
   bool bFound;
   int UpperLevel_original = UpperLevel;
+  uint64 ParseStart = DataStream.getFilePointer();
 
   do {
     // read a potential ID
@@ -402,6 +403,7 @@ EbmlElement * EbmlElement::FindNextEleme
         // ID not found
         // shift left the read octets
         memmove(&PossibleIdNSize[0],&PossibleIdNSize[1], --ReadIndex);
+        IdStart++;
       }
 
       if (MaxDataSize <= ReadSize)
@@ -460,10 +462,11 @@ EbmlElement * EbmlElement::FindNextEleme
           //  0 : child
           //  1 : same level
           //  + : further parent
-          if (Result->ValidateSize() && (SizeFound == SizeUnknown || UpperLevel > 0 || MaxDataSize == 0 || MaxDataSize >= (PossibleID_Length + PossibleSizeLength + SizeFound))) {
+          if (Result->ValidateSize() && (SizeFound == SizeUnknown || UpperLevel > 0 || MaxDataSize == 0 ||
+                                         MaxDataSize >= (IdStart + PossibleID_Length + _SizeLength + SizeFound))) {
             if (SizeFound != SizeUnknown || Result->SetSizeInfinite()) {
-              Result->SizePosition = DataStream.getFilePointer() - SizeIdx + EBML_ID_LENGTH(PossibleID);
-              Result->ElementPosition = Result->SizePosition - EBML_ID_LENGTH(PossibleID);
+              Result->ElementPosition = ParseStart + IdStart;
+              Result->SizePosition = Result->ElementPosition + PossibleID_Length;
               // place the file at the beggining of the data
               DataStream.setFilePointer(Result->SizePosition + _SizeLength);
               return Result;
@@ -477,6 +480,7 @@ EbmlElement * EbmlElement::FindNextEleme
     // recover all the data in the buffer minus one byte
     ReadIndex = SizeIdx - 1;
     memmove(&PossibleIdNSize[0], &PossibleIdNSize[1], ReadIndex);
+    IdStart++;
     UpperLevel = UpperLevel_original;
   } while ( MaxDataSize >= ReadSize );
 
