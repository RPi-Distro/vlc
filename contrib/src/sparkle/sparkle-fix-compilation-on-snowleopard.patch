diff -ru sparkle/SUAppcast.h sparkle-fixed/SUAppcast.h
--- sparkle/SUAppcast.h	2014-04-26 00:22:59.000000000 +0200
+++ sparkle-fixed/SUAppcast.h	2014-08-18 20:18:30.000000000 +0200
@@ -12,7 +12,7 @@
 @protocol SUAppcastDelegate;
 
 @class SUAppcastItem;
-@interface SUAppcast : NSObject<NSURLDownloadDelegate>
+@interface SUAppcast : NSObject
 {
 @private
 	NSArray *items;
diff -ru sparkle/SUAppcast.m sparkle-fixed/SUAppcast.m
--- sparkle/SUAppcast.m	2014-04-26 00:22:59.000000000 +0200
+++ sparkle-fixed/SUAppcast.m	2014-08-18 20:18:36.000000000 +0200
@@ -32,7 +32,7 @@
 }
 @end
 
-@interface SUAppcast () <NSURLDownloadDelegate>
+@interface SUAppcast ()
 @property (copy) NSString *downloadFilename;
 @property (retain) NSURLDownload *download;
 @property (copy) NSArray *items;
@@ -92,14 +92,7 @@
 	
 	if (downloadFilename)
 	{
-        NSUInteger options = 0;
-        if (NSAppKitVersionNumber < NSAppKitVersionNumber10_7) {
-            // In order to avoid including external entities when parsing the appcast (a potential security vulnerability; see https://github.com/andymatuschak/Sparkle/issues/169), we ask NSXMLDocument to "tidy" the XML first. This happens to remove these external entities; it wouldn't be a future-proof approach, but it worked in these historical versions of OS X, and we have a more rigorous approach for 10.7+.
-            options = NSXMLDocumentTidyXML;
-        } else {
-            // In 10.7 and later, there's a real option for the behavior we desire.
-            options = NSXMLNodeLoadExternalEntitiesSameOriginOnly;
-        }
+        NSUInteger options = NSXMLDocumentTidyXML;
 		document = [[[NSXMLDocument alloc] initWithContentsOfURL:[NSURL fileURLWithPath:downloadFilename] options:options error:&error] autorelease];
 	
 		[[NSFileManager defaultManager] removeItemAtPath:downloadFilename error:nil];
diff -ru sparkle/SUAppcastItem.h sparkle-fixed/SUAppcastItem.h
--- sparkle/SUAppcastItem.h	2014-04-26 00:22:59.000000000 +0200
+++ sparkle-fixed/SUAppcastItem.h	2014-08-18 20:14:01.000000000 +0200
@@ -46,8 +46,8 @@
 @property (retain, readonly) NSURL *infoURL;
 
 // Initializes with data from a dictionary provided by the RSS class.
-- (instancetype)initWithDictionary:(NSDictionary *)dict;
-- (instancetype)initWithDictionary:(NSDictionary *)dict failureReason:(NSString**)error;
+- (id)initWithDictionary:(NSDictionary *)dict;
+- (id)initWithDictionary:(NSDictionary *)dict failureReason:(NSString**)error;
 
 - (BOOL)isDeltaUpdate;
 - (BOOL)isCriticalUpdate;
diff -ru sparkle/SUBasicUpdateDriver.h sparkle-fixed/SUBasicUpdateDriver.h
--- sparkle/SUBasicUpdateDriver.h	2014-04-26 00:22:59.000000000 +0200
+++ sparkle-fixed/SUBasicUpdateDriver.h	2014-08-18 20:18:41.000000000 +0200
@@ -15,7 +15,7 @@
 #import "SUAppcast.h"
 
 @class SUAppcastItem, SUHost;
-@interface SUBasicUpdateDriver : SUUpdateDriver<NSURLDownloadDelegate, SUUnarchiverDelegate, SUAppcastDelegate> {
+@interface SUBasicUpdateDriver : SUUpdateDriver<SUUnarchiverDelegate, SUAppcastDelegate> {
 	SUAppcastItem *updateItem;
 	SUAppcastItem *nonDeltaUpdateItem;
 	
diff -ru sparkle/SUBasicUpdateDriver.m sparkle-fixed/SUBasicUpdateDriver.m
--- sparkle/SUBasicUpdateDriver.m	2014-04-26 00:22:59.000000000 +0200
+++ sparkle-fixed/SUBasicUpdateDriver.m	2014-08-18 20:16:53.000000000 +0200
@@ -106,7 +106,7 @@
 	if ([[updater delegate] respondsToSelector:@selector(updater:didFinishLoadingAppcast:)])
 		[[updater delegate] updater:updater didFinishLoadingAppcast:ac];
 	
-	NSDictionary *userInfo = (ac != nil) ? @{SUUpdaterAppcastNotificationKey : ac} : nil;
+	NSDictionary *userInfo = (ac != nil) ? [NSDictionary dictionaryWithObject:ac forKey:SUUpdaterAppcastNotificationKey] : nil;
 	[[NSNotificationCenter defaultCenter] postNotificationName:SUUpdaterDidFinishLoadingAppCastNotification object:updater userInfo:userInfo];
     
     SUAppcastItem *item = nil;
@@ -153,7 +153,7 @@
 {
 	if ([[updater delegate] respondsToSelector:@selector(updater:didFindValidUpdate:)])
 		[[updater delegate] updater:updater didFindValidUpdate:updateItem];
-	NSDictionary *userInfo = (updateItem != nil) ? @{SUUpdaterAppcastItemNotificationKey : updateItem} : nil;
+	NSDictionary *userInfo = (updateItem != nil) ? [NSDictionary dictionaryWithObject:updateItem forKey:SUUpdaterAppcastItemNotificationKey] : nil;
 	[[NSNotificationCenter defaultCenter] postNotificationName:SUUpdaterDidFinishLoadingAppCastNotification object:updater userInfo:userInfo];
 	[self downloadUpdate];
 }
diff -ru sparkle/SUProbingUpdateDriver.m sparkle-fixed/SUProbingUpdateDriver.m
--- sparkle/SUProbingUpdateDriver.m	2014-04-26 00:22:59.000000000 +0200
+++ sparkle-fixed/SUProbingUpdateDriver.m	2014-08-18 20:17:38.000000000 +0200
@@ -17,7 +17,7 @@
 {
 	if ([[updater delegate] respondsToSelector:@selector(updater:didFindValidUpdate:)])
 		[[updater delegate] updater:updater didFindValidUpdate:updateItem];
-	NSDictionary *userInfo = (updateItem != nil) ? @{SUUpdaterAppcastItemNotificationKey : updateItem} : nil;
+	NSDictionary *userInfo = (updateItem != nil) ? [NSDictionary dictionaryWithObject:updateItem forKey:SUUpdaterAppcastItemNotificationKey] : nil;
 	[[NSNotificationCenter defaultCenter] postNotificationName:SUUpdaterDidFindValidUpdateNotification object:updater userInfo:userInfo];
 	[self abortUpdate];
 }
diff -ru sparkle/SUUpdateDriver.h sparkle-fixed/SUUpdateDriver.h
--- sparkle/SUUpdateDriver.h	2014-04-26 00:22:59.000000000 +0200
+++ sparkle-fixed/SUUpdateDriver.h	2014-08-18 20:15:46.000000000 +0200
@@ -14,7 +14,7 @@
 extern NSString * const SUUpdateDriverFinishedNotification;
 
 @class SUHost, SUUpdater;
-@interface SUUpdateDriver : NSObject<NSURLDownloadDelegate>
+@interface SUUpdateDriver : NSObject
 {
 	SUHost *host;
 	SUUpdater *updater;
diff -ru sparkle/SUUpdater.h sparkle-fixed/SUUpdater.h
--- sparkle/SUUpdater.h	2014-04-26 00:22:59.000000000 +0200
+++ sparkle-fixed/SUUpdater.h	2014-08-18 20:14:31.000000000 +0200
@@ -28,7 +28,7 @@
 
 + (SUUpdater *)sharedUpdater;
 + (SUUpdater *)updaterForBundle:(NSBundle *)bundle;
-- (instancetype)initForBundle:(NSBundle *)bundle;
+- (id)initForBundle:(NSBundle *)bundle;
 
 - (NSBundle *)hostBundle;
 
