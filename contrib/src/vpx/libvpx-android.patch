We don't use Android.mk to build libvpx. Then we have to force the build of
cpu-features.c. Additionally, we don't need to link with pthread.

--- libvpx/libs.mk.orig	2016-05-20 12:24:16.635969371 +0200
+++ libvpx/libs.mk	2016-05-20 12:25:01.275249347 +0200
@@ -300,7 +300,7 @@
 	$(qexec)echo 'Conflicts:' >> $@
 	$(qexec)echo 'Libs: -L$${libdir} -lvpx -lm' >> $@
 ifeq ($(HAVE_PTHREAD_H),yes)
-	$(qexec)echo 'Libs.private: -lm -lpthread' >> $@
+	$(qexec)echo 'Libs.private: -lm' >> $@
 else
 	$(qexec)echo 'Libs.private: -lm' >> $@
 endif
--- libvpx/vpx_ports/vpx_ports.mk.orig	2016-05-20 12:35:19.293271792 +0200
+++ libvpx/vpx_ports/vpx_ports.mk	2016-05-20 12:35:06.857472718 +0200
@@ -21,4 +21,5 @@
 endif
 
 PORTS_SRCS-$(ARCH_ARM) += arm_cpudetect.c
+PORTS_SRCS-$(ARCH_ARM) += cpu-features.c
 PORTS_SRCS-$(ARCH_ARM) += arm.h
--- libvpx/build/make/configure.sh.orig	2017-04-08 12:19:54.992242234 +0200
+++ libvpx/build/make/configure.sh	2017-04-08 12:22:19.280235805 +0200
@@ -628,8 +628,8 @@
 }
 
 setup_gnu_toolchain() {
-  CC=${CC:-${CROSS}gcc}
-  CXX=${CXX:-${CROSS}g++}
+  CC=clang
+  CXX=clang++
   AR=${AR:-${CROSS}ar}
   LD=${LD:-${CROSS}${link_with_cc:-ld}}
   AS=${AS:-${CROSS}as}
@@ -916,8 +916,8 @@
             COMPILER_LOCATION=`find "${SDK_PATH}" \
               -name "arm-linux-androideabi-gcc*" -print -quit`
             TOOLCHAIN_PATH=${COMPILER_LOCATION%/*}/arm-linux-androideabi-
-            CC=${TOOLCHAIN_PATH}gcc
-            CXX=${TOOLCHAIN_PATH}g++
-            AR=${TOOLCHAIN_PATH}ar
+            CC=clang
+            CXX=clang++
+            AR=llvm-ar
             LD=${TOOLCHAIN_PATH}gcc
             AS=${TOOLCHAIN_PATH}as
@@ -948,7 +948,8 @@
               soft_enable runtime_cpu_detect
             fi
             if enabled runtime_cpu_detect; then
-              add_cflags "-I${SDK_PATH}/sources/android/cpufeatures"
+              cp "${ANDROID_NDK}/sources/android/cpufeatures/cpu-features.c" vpx_ports
+              add_cflags "-I${ANDROID_NDK}/sources/android/cpufeatures"
             fi
           else
             echo "Assuming standalone build with NDK toolchain."
@@ -1331,9 +1332,6 @@
       *-android-gcc)
         # bionic includes basic pthread functionality, obviating -lpthread.
         ;;
-      *)
-        check_header pthread.h && add_extralibs -lpthread
-        ;;
     esac
   fi
 
--- libvpx/vpx_ports/x86_abi_support.asm.orig	2017-12-22 14:13:01.624421364 +0100
+++ libvpx/vpx_ports/x86_abi_support.asm	2017-12-22 14:12:32.152908813 +0100
@@ -393,6 +393,7 @@
 
 ; On Android platforms use lrand48 when building postproc routines. Prior to L
 ; rand() was not available.
+%define __ANDROID__
 %if CONFIG_POSTPROC=1 || CONFIG_VP9_POSTPROC=1
 %ifdef __ANDROID__
 extern sym(lrand48)
--- libvpx/build/make/configure.sh.old	2018-12-06 14:15:31.119934158 +0100
+++ libvpx/build/make/configure.sh	2018-12-06 14:15:45.883934102 +0100
@@ -950,13 +950,12 @@
               add_ldflags "--sysroot=${alt_libc}"
             fi
 
-            # linker flag that routes around a CPU bug in some
-            # Cortex-A8 implementations (NDK Dev Guide)
-            add_ldflags "-Wl,--fix-cortex-a8"
-
             enable_feature pic
             soft_enable realtime_only
             if [ ${tgt_isa} = "armv7" ]; then
+              # linker flag that routes around a CPU bug in some
+              # Cortex-A8 implementations (NDK Dev Guide)
+              add_ldflags "-Wl,--fix-cortex-a8"
               soft_enable runtime_cpu_detect
             fi
             if enabled runtime_cpu_detect; then
