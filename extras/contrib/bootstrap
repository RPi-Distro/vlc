#!/bin/sh
# ***************************************************************************
# bootstrap : Set up config.mak
# ***************************************************************************
# Copyright (C) 2003-2006 the VideoLAN team
# $Id$
#
# Authors: Christophe Massiot <massiot@via.ecp.fr>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
# ***************************************************************************

if test "$#" -gt "1"; then
  echo "Usage: $0 <host>" >&2
  echo "  Prepare config.mak file." >&2
  exit 1
fi

LANG=C
export LANG
set -e
set -x

BUILD=`gcc -dumpmachine`
if test "$#" = "1"; then
  HOST="$1"
else
  HOST="$BUILD"
fi

rm -f config.mak
{
    echo "# Automatically generated by bootstrap."
    echo "# Make changes if you know what you're doing."
} > config.mak

if test "$HOST" != "$BUILD"; then
    CC="${HOST}-gcc"
    CXX="${HOST}-g++"
    LD="${HOST}-ld"
    RANLIB="${HOST}-ranlib"
    AR="${HOST}-ar"
fi

case $HOST in
    ppc-darwin)
# Mac OS X < 10.4
	    echo "HAVE_DARWIN_OS = 1" >> config.mak
	    EXTRA_CPPFLAGS=" -no-cpp-precomp"
	    echo "PATH = /bin:/usr/bin" >> config.mak
	;;
    powerpc-apple-darwin8)
# Mac OS X 10.4
# Makefile cross compiling is only supported with gcc-4.0
# ENVP defines the oldest environment on which the program will be able to run
# SDK 10.2.8 requires gcc-3.3 (so we cannot use that SDK)
	    SDK_TARGET=10.3
	    echo "SDK_TARGET = ${SDK_TARGET}" >> config.mak
	    echo "HAVE_DARWIN_OS = 1" >> config.mak
	    echo "ENVP = MACOSX_DEPLOYMENT_TARGET=${SDK_TARGET}" >> config.mak
	    echo "MACOSX_SDK = /Developer/SDKs/MacOSX10.3.9.sdk" >> config.mak
	    CFLAGS_TUNING=" -mtune=G4"
	    EXTRA_CFLAGS=" -D\${ENVP} -isysroot \${MACOSX_SDK}"
	    EXTRA_LDFLAGS=" -isysroot \${MACOSX_SDK} -Wl,-syslibroot,\${MACOSX_SDK}"
	    echo "PATH = /bin:/usr/bin:/usr/local/bin" >> config.mak
        ;;
    i686-apple-darwin8)
	    SDK_TARGET=10.4
	    echo "SDK_TARGET = ${SDK_TARGET}" >> config.mak
	    echo "HAVE_DARWIN_OS_ON_INTEL = 1" >> config.mak
	    echo "HAVE_DARWIN_OS = 1" >> config.mak
	    echo "ENVP = MACOSX_DEPLOYMENT_TARGET=${SDK_TARGET}" >> config.mak
	    echo "MACOSX_SDK = /Developer/SDKs/MacOSX10.4u.sdk" >> config.mak
	    CFLAGS_TUNING=" -march=pentium-m -mtune=prescott"
	    EXTRA_CFLAGS=" -D\${ENVP} -isysroot \${MACOSX_SDK}"
	    EXTRA_LDFLAGS=" -isysroot \${MACOSX_SDK} -Wl,-syslibroot,\${MACOSX_SDK}"
	    echo "PATH = /bin:/usr/bin:/usr/local/bin" >> config.mak
        ;;
    i586-pc-beos)
            echo "HAVE_BEOS = 1" >> config.mak
            if test -f /boot/beos/system/lib/libbind.so; then
                EXTRA_LDFLAGS=" -lbind -lsocket"
            else
                EXTRA_LDFLAGS=" -lnet"
            fi
            if test "$HOST" = "$BUILD"; then
#               Compiling on BeOS
                PATH=".:/boot/home/config/bin:/bin:/boot/apps"
                PATH="${PATH}:/boot/preferences:/boot/beos/apps"
                PATH="${PATH}:/boot/beos/preferences"
                PATH="${PATH}:/boot/develop/tools/gnupro/bin"
                echo "PATH = ${PATH}" >> config.mak
                LIBRARY_PATH="${LIBRARY_PATH}:%A/lib:/boot/home/config/lib"
                LIBRARY_PATH="${LIBRARY_PATH}:/boot/beos/system/lib"
                echo "LIBRARY_PATH = ${LIBRARY_PATH}" >> config.mak
            else
#               Cross compiling from Linux
                PATH="/opt/beos-tools/bin:/opt/cross-tools/bin"
                PATH="${PATH}:/usr/bin:/bin"
                echo "PATH = ${PATH}" >> config.mak
            fi
        ;;
    *mingw32*)
            echo "HAVE_WIN32 = 1" >> config.mak
            echo "PKG_CONFIG_PATH = \$(PREFIX)/lib/pkgconfig" >> config.mak
        ;;
    i686-pc-cygwin)
            echo "HAVE_WIN32 = 1" >> config.mak
            CC="gcc -mno-cygwin -isystem /usr/include/mingw"
            CXX="g++ -mno-cygwin -isystem /usr/include/mingw"
            HOST=`$CC -dumpmachine`
            EXTRA_CFLAGS=" -mno-cygwin -isystem /usr/include/mingw"
            EXTRA_CPPFLAGS=" -mno-cygwin -isystem /usr/include/mingw"
            EXTRA_LDFLAGS=" -mno-cygwin"
            echo "PKG_CONFIG_PATH = \$(PREFIX)/lib/pkgconfig" >> config.mak
        ;;
    arm-wince-pe)
            echo "HAVE_WINCE = 1" >> config.mak
            echo "PKG_CONFIG_PATH = \$(PREFIX)/lib/pkgconfig" >> config.mak
            EXTRA_CPPFLAGS=" -D_WIN32_WCE"
        ;;
    *)
        ;;
esac

echo "BUILD = $BUILD" >> config.mak
echo "HOST = $HOST" >> config.mak

echo "PREFIX = `pwd`" >> config.mak

echo "CC = ${CC}" >> config.mak
echo "CXX = ${CXX}" >> config.mak
echo "LD = ${LD}" >> config.mak
echo "RANLIB = ${RANLIB}" >> config.mak
echo "AR = ${AR}" >> config.mak
echo "EXTRA_CFLAGS = ${CFLAGS_TUNING} ${EXTRA_CFLAGS}" >> config.mak
echo "EXTRA_CPPFLAGS = ${EXTRA_CPPFLAGS} -I\$(PREFIX)/include" >> config.mak
echo "EXTRA_LDFLAGS = ${EXTRA_LDFLAGS}" >> config.mak
echo "EXTRA_PATH = ${EXTRA_PATH}" >> config.mak

if which curl >/dev/null; then
	echo "WGET = curl -O" >> config.mak
elif wget --version >/dev/null 2>&1; then
	echo "WGET = wget" >> config.mak
else
	echo "You need at least wget or curl to fetch the packages." >&2
	exit 1
fi

if test -f /sw/bin/svn; then
        echo "SVN = /sw/bin/svn" >> config.mak
elif test -f /usr/local/bin/svn; then
        echo "SVN = /usr/local/bin/svn" >> config.mak
elif test -f /opt/local/bin/svn; then
	echo "SVN = /opt/local/bin/svn" >> config.mak
elif svn help >/dev/null 2>&1; then
        echo "SVN = svn" >> config.mak
else
        echo "You do not have a subversion client installed." >&2
fi

if git help >/dev/null 2>&1; then
    echo "GIT = `which git`" >> config.mak
else
    echo "You do not have a Git client in your PATH." >&2
fi
