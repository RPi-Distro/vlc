Index: libavcodec/x86/motion_est_mmx.c
===================================================================
--- libavcodec/x86/motion_est_mmx.c	(revision 18254)
+++ libavcodec/x86/motion_est_mmx.c	(working copy)
@@ -191,7 +191,7 @@
         "sub $2, %0                     \n\t"
         " jg 1b                         \n\t"
         : "+r" (h), "+r" (blk1), "+r" (blk2)
-        : "r" ((x86_reg)stride)
+        : "r" ((x86_reg)stride), "m" (bone)
     );
 }
 
@@ -259,7 +259,7 @@
         "punpckhbw %%mm7, %%mm5         \n\t"
         "paddw %%mm4, %%mm2             \n\t"
         "paddw %%mm5, %%mm3             \n\t"
-        "movq 16+"MANGLE(round_tab)", %%mm5 \n\t"
+        "movq 16+%5, %%mm5 \n\t"
         "paddw %%mm2, %%mm0             \n\t"
         "paddw %%mm3, %%mm1             \n\t"
         "paddw %%mm5, %%mm0             \n\t"
@@ -282,7 +282,7 @@
         "add %4, %%"REG_a"              \n\t"
         " js 1b                         \n\t"
         : "+a" (len)
-        : "r" (blk1 - len), "r" (blk1 -len + stride), "r" (blk2 - len), "r" ((x86_reg)stride)
+        : "r" (blk1 - len), "r" (blk1 -len + stride), "r" (blk2 - len), "r" ((x86_reg)stride), "m" (round_tab[0])
     );
 }
 
Index: libavcodec/x86/simple_idct_mmx.c
===================================================================
--- libavcodec/x86/simple_idct_mmx.c	(revision 18254)
+++ libavcodec/x86/simple_idct_mmx.c	(working copy)
@@ -364,7 +364,7 @@
         "movq " #src4 ", %%mm1          \n\t" /* R6     R2      r6      r2 */\
         "movq " #src1 ", %%mm2          \n\t" /* R3     R1      r3      r1 */\
         "movq " #src5 ", %%mm3          \n\t" /* R7     R5      r7      r5 */\
-        "movq "MANGLE(wm1010)", %%mm4   \n\t"\
+        "movq %3, %%mm4                 \n\t"\
         "pand %%mm0, %%mm4              \n\t"\
         "por %%mm1, %%mm4               \n\t"\
         "por %%mm2, %%mm4               \n\t"\
@@ -438,7 +438,7 @@
         "jmp 2f                         \n\t"\
         "1:                             \n\t"\
         "pslld $16, %%mm0               \n\t"\
-        "#paddd "MANGLE(d40000)", %%mm0 \n\t"\
+        "#paddd %4, %%mm0               \n\t"\
         "psrad $13, %%mm0               \n\t"\
         "packssdw %%mm0, %%mm0          \n\t"\
         "movq %%mm0, " #dst "           \n\t"\
@@ -472,7 +472,7 @@
         "movq " #src4 ", %%mm1          \n\t" /* R6     R2      r6      r2 */\
         "movq " #src1 ", %%mm2          \n\t" /* R3     R1      r3      r1 */\
         "movq " #src5 ", %%mm3          \n\t" /* R7     R5      r7      r5 */\
-        "movq "MANGLE(wm1010)", %%mm4   \n\t"\
+        "movq %3, %%mm4                 \n\t"\
         "pand %%mm0, %%mm4              \n\t"\
         "por %%mm1, %%mm4               \n\t"\
         "por %%mm2, %%mm4               \n\t"\
@@ -546,7 +546,7 @@
         "jmp 2f                         \n\t"\
         "1:                             \n\t"\
         "pslld $16, %%mm0               \n\t"\
-        "paddd "MANGLE(d40000)", %%mm0  \n\t"\
+        "paddd %4, %%mm0                \n\t"\
         "psrad $13, %%mm0               \n\t"\
         "packssdw %%mm0, %%mm0          \n\t"\
         "movq %%mm0, " #dst "           \n\t"\
@@ -1271,7 +1271,7 @@
 */
 
 "9: \n\t"
-                :: "r" (block), "r" (temp), "r" (coeffs)
+                :: "r" (block), "r" (temp), "r" (coeffs), "m" (wm1010), "m"(d40000)
                 : "%eax"
         );
 }
Index: libavcodec/x86/cavsdsp_mmx.c
===================================================================
--- libavcodec/x86/cavsdsp_mmx.c	(revision 18254)
+++ libavcodec/x86/cavsdsp_mmx.c	(working copy)
@@ -27,6 +27,22 @@
 #include "libavcodec/dsputil.h"
 #include "dsputil_mmx.h"
 
+#define SUMSUB_BA( a, b ) \
+"paddw "#b", "#a" \n\t"\
+"paddw "#b", "#b" \n\t"\
+"psubw "#a", "#b" \n\t"
+
+#define SBUTTERFLY(a,b,t,n,m)\
+"mov" #m " " #a ", " #t "         \n\t" /* abcd */\
+"punpckl" #n " " #b ", " #a "     \n\t" /* aebf */\
+"punpckh" #n " " #b ", " #t "     \n\t" /* cgdh */\
+
+#define TRANSPOSE4(a,b,c,d,t)\
+SBUTTERFLY(a,b,t,wd,q) /* a=aebf t=cgdh */\
+SBUTTERFLY(c,d,b,wd,q) /* c=imjn b=kolp */\
+SBUTTERFLY(a,c,d,dq,q) /* a=aeim d=bfjn */\
+SBUTTERFLY(t,b,c,dq,q) /* t=cgko c=dhlp */
+
 /*****************************************************************************
  *
  * inverse transform
Index: libavcodec/x86/flacdsp_mmx.c
===================================================================
--- libavcodec/x86/flacdsp_mmx.c	(revision 18254)
+++ libavcodec/x86/flacdsp_mmx.c	(working copy)
@@ -27,7 +27,6 @@
     double c = 2.0 / (len-1.0);
     int n2 = len>>1;
     x86_reg i = -n2*sizeof(int32_t);
-    x86_reg j =  n2*sizeof(int32_t);
     __asm__ volatile(
         "movsd   %0,     %%xmm7                \n\t"
         "movapd  "MANGLE(ff_pd_1)", %%xmm6     \n\t"
@@ -55,7 +54,7 @@
         "sub      $8,      %1                  \n\t"\
         "add      $8,      %0                  \n\t"\
         "jl 1b                                 \n\t"\
-        :"+&r"(i), "+&r"(j)\
+        :"+&r"(i)\
         :"r"(w_data+n2), "r"(data+n2)\
     );
     if(len&1)
